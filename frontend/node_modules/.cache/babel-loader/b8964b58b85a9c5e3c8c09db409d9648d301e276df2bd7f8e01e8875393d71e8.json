{"ast":null,"code":"var _jsxFileName = \"/Users/justintsugranes/master/LEARNING/traversy-react-stripe-store/src/CartContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport { getProductData } from './ProductsStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext({\n  items: [],\n  getProductQuantity: () => {},\n  addOneToCart: () => {},\n  removeOneFromCart: () => {},\n  deleteFromCart: () => {},\n  getTotalCost: () => {}\n});\nexport function CartProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [cartProducts, setCartProducts] = useState([]);\n  function getProductQuantity(id) {\n    var _cartProducts$find;\n    const quantity = (_cartProducts$find = cartProducts.find(product => product.id === id)) === null || _cartProducts$find === void 0 ? void 0 : _cartProducts$find.quantity;\n    if (quantity === undefined) {\n      return 0;\n    }\n    return quantity;\n  }\n  function addOneToCart(id) {\n    const quantity = getProductQuantity(id);\n    if (quantity === 0) {\n      setCartProducts([...cartProducts, {\n        id: id,\n        quantity: 1\n      }]);\n    } else {\n      setCartProducts(cartProducts.map(product => product.id === id ? {\n        ...product,\n        quantity: product.quantity + 1\n      } : product));\n    }\n  }\n  function removeOneFromCart(id) {\n    const quantity = getProductQuantity(id);\n    if (quantity === 1) {\n      deleteFromCart(id);\n    } else {\n      setCartProducts(cartProducts.map(product => product.id === id ? {\n        ...product,\n        quantity: product.quantity - 1\n      } : product));\n    }\n  }\n  function deleteFromCart(id) {\n    // if object meets condition, add object to array filter\n    setCartProducts(cartProducts => cartProducts.filter(currentProduct => {\n      return currentProduct.id !== id;\n    }));\n  }\n\n  //  ERR: Array.prototype.map() expects a return value from arrow function  array-callback-return\n  function getTotalCost(id) {\n    let totalCost = 0;\n    // eslint-disable-next-line\n    cartProducts.map(cartItem => {\n      const productData = getProductData(cartItem.id);\n      totalCost += productData.price * cartItem.quantity;\n    });\n    return totalCost;\n  }\n  const contextValue = {\n    items: cartProducts,\n    getProductQuantity,\n    addOneToCart,\n    removeOneFromCart,\n    deleteFromCart,\n    getTotalCost\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"U6A359Ie+N1Isul8547a+XNDaDk=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// Content(cart,addToCart,removeCart)\n// Provider => gives your react app access to all the things in your context\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","getProductData","CartContext","items","getProductQuantity","addOneToCart","removeOneFromCart","deleteFromCart","getTotalCost","CartProvider","children","cartProducts","setCartProducts","id","quantity","find","product","undefined","map","filter","currentProduct","totalCost","cartItem","productData","price","contextValue"],"sources":["/Users/justintsugranes/master/LEARNING/traversy-react-stripe-store/src/CartContext.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport { getProductData } from './ProductsStore'\n\nexport const CartContext = createContext({\n  items: [],\n  getProductQuantity: () => {},\n  addOneToCart: () => {},\n  removeOneFromCart: () => {},\n  deleteFromCart: () => {},\n  getTotalCost: () => {},\n})\n\nexport function CartProvider({ children }) {\n  const [cartProducts, setCartProducts] = useState([])\n\n  function getProductQuantity(id) {\n    const quantity = cartProducts.find((product) => product.id === id)?.quantity\n\n    if (quantity === undefined) {\n      return 0\n    }\n\n    return quantity\n  }\n\n  function addOneToCart(id) {\n    const quantity = getProductQuantity(id)\n    if (quantity === 0) {\n      setCartProducts([\n        ...cartProducts,\n        {\n          id: id,\n          quantity: 1,\n        },\n      ])\n    } else {\n      setCartProducts(\n        cartProducts.map((product) =>\n          product.id === id\n            ? { ...product, quantity: product.quantity + 1 }\n            : product,\n        ),\n      )\n    }\n  }\n\n  function removeOneFromCart(id) {\n    const quantity = getProductQuantity(id)\n\n    if (quantity === 1) {\n      deleteFromCart(id)\n    } else {\n      setCartProducts(\n        cartProducts.map((product) =>\n          product.id === id\n            ? { ...product, quantity: product.quantity - 1 }\n            : product,\n        ),\n      )\n    }\n  }\n\n  function deleteFromCart(id) {\n    // if object meets condition, add object to array filter\n    setCartProducts((cartProducts) =>\n      cartProducts.filter((currentProduct) => {\n        return currentProduct.id !== id\n      }),\n    )\n  }\n\n  //  ERR: Array.prototype.map() expects a return value from arrow function  array-callback-return\n  function getTotalCost(id) {\n    let totalCost = 0\n    // eslint-disable-next-line\n    cartProducts.map((cartItem) => {\n      const productData = getProductData(cartItem.id)\n      totalCost += productData.price * cartItem.quantity\n    })\n    return totalCost\n  }\n\n  const contextValue = {\n    items: cartProducts,\n    getProductQuantity,\n    addOneToCart,\n    removeOneFromCart,\n    deleteFromCart,\n    getTotalCost,\n  }\n\n  return (\n    <CartContext.Provider value={contextValue}>{children}</CartContext.Provider>\n  )\n}\n\nexport default CartProvider\n\n// Content(cart,addToCart,removeCart)\n// Provider => gives your react app access to all the things in your context\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}